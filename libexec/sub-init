#!/usr/bin/env bash
set -e

print=""
if [ "$1" = "-" ]; then
  print=1
  shift
fi

shell="$1"
if [ -z "$shell" ]; then
  shell="$(basename "$SHELL")"
fi

resolve_link() {
  $(type -p greadlink readlink | head -1) $1
}

abs_dirname() {
  local cwd="$(pwd)"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
  cd "$cwd"
}

root="$(abs_dirname "$0")/.."

if [ -z "$print" ]; then
  case "$shell" in
  bash )
    profile='~/.bash_profile'
    ;;
  zsh )
    profile='~/.zshenv'
    ;;
  * )
    profile='your profile'
    ;;
  esac

  { echo "# Load sub automatically by adding"
    echo "# the following to ${profile}:"
    echo
    echo "eval \"\$(${_SUB_ROOT}/bin/sub init -)\""
    echo
  } >&2

  exit 1
fi

echo "export PATH=\"\${PATH}:${_SUB_ROOT}/bin\""

case "$shell" in
bash | zsh )
  echo "source \"$root/completions/sub.${shell}\""
  ;;
esac

cat <<EOS
_sub_wrapper() {
    [[ -z \$1 ]] && command sub || true
    local running_path=$_SUB_ROOT/libexec
    local running_command
    local cmd=""
    for command in \$@
    do
        if [[ -d \$running_path/sub-\$command ]]; then
            running_path=\$running_path/sub-\$command
            running_command="\$running_command \$command"
            shift
            continue
        elif [[ -f \$running_path/sub-sh-\$command ]]; then
            cmd="\$running_command sh-\$command"
            shift
        else
            command sub \$running_command "\$@"
            return \$?
        fi

        if [[ -n \$cmd ]]; then
            eval \`command sub \$cmd "\$@"\`
            return \$?
        fi
    done
    command sub \$running_command "\$@"
}
EOS

# zsh can't pass argument with aliases, but bash can.
# zsh can have functions with the name being only numbers, but bash can't.
# fix both cases here by letting zsh have a function, and bash have its alias.
case "$shell" in
bash )
  echo "alias sub=_sub_wrapper"
  ;;
zsh )
  echo "sub=_sub_wrapper"
  ;;
esac
